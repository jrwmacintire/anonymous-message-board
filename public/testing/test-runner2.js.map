{"version":3,"sources":["../../src/testing/test-runner2.ts"],"names":["mocha","Mocha","testDir","__dirname","fs","readdir","err","files","filter","file","substr","forEach","addFile","path","join","TestEmitter","tests","context","separator","runner","ui","run","on","test","body","replace","obj","title","slice","length","state","assertions","push","report","emit","s","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAGA,IAAMA,KAAK,GAAG,IAAIC,iBAAJ,EAAd;AACA,IAAMC,OAAO,GAAGC,SAAS,GAAG,QAA5B,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,eAAGC,OAAH,CAAWH,OAAX,EAAoB,UAACI,GAAD,EAAMC,KAAN,EAAgB;AAClCA,EAAAA,KAAK,CACFC,MADH,CACU,UAAAC,IAAI,EAAI;AACd,WAAOA,IAAI,CAACC,MAAL,CAAY,CAAC,CAAb,MAAoB,KAA3B;AACD,GAHH,EAIGC,OAJH,CAIW,UAAAF,IAAI,EAAI;AACfT,IAAAA,KAAK,CAACY,OAAN,CAAcC,iBAAKC,IAAL,CAAUZ,OAAV,EAAmBO,IAAnB,CAAd;AACD,GANH;AAOD,CARD;;IAUMM,W;;;;;AAEJ,yBAAc;AAAA;;AAAA;AACZ;AADY;AAAA,4FAKR,YAAM;AACV;AACA,UAAIC,KAAe,GAAG,EAAtB;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,SAAS,GAAG,MAAhB;;AAEA,UAAI;AACF,YAAMC,MAAM,GAAGnB,KAAK,CACjBoB,EADY,CACT,KADS,EAEZC,GAFY,GAGZC,EAHY,CAGT,UAHS,EAGG,UAAAC,IAAI,EAAI;AACtB;AACA,cAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,oBAAlB,EAAwC,EAAxC,CAAX,CAFsB,CAGtB;;AACAD,UAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACA,cAAMC,GAAG,GAAG;AACVC,YAAAA,KAAK,EAAEJ,IAAI,CAACI,KADF;AAEVV,YAAAA,OAAO,EAAEA,OAAO,CAACW,KAAR,CAAc,CAAd,EAAiB,CAACV,SAAS,CAACW,MAA5B,CAFC;AAGVC,YAAAA,KAAK,EAAEP,IAAI,CAACO,KAHF;AAIVN,YAAAA,IAAI,EAAEA,IAJI;AAKVO,YAAAA,UAAU,EAAE,mCAASP,IAAT;AALF,WAAZ;AAOAR,UAAAA,KAAK,CAACgB,IAAN,CAAWN,GAAX;AACD,SAhBY,EAiBZJ,EAjBY,CAiBT,KAjBS,EAiBF,YAAM;AACf,gBAAKW,MAAL,GAAcjB,KAAd;;AACA,gBAAKkB,IAAL,CAAU,MAAV,EAAkBlB,KAAlB;AACD,SApBY,EAqBZM,EArBY,CAqBT,OArBS,EAqBA,UAAAa,CAAC,EAAI;AAChBlB,UAAAA,OAAO,IAAIkB,CAAC,CAACR,KAAF,GAAUT,SAArB;AACD,SAvBY,EAwBZI,EAxBY,CAwBT,WAxBS,EAwBI,UAAAa,CAAC,EAAI;AACpBlB,UAAAA,OAAO,GAAGA,OAAO,CAACW,KAAR,CAAc,CAAd,EAAiB,EAAEO,CAAC,CAACR,KAAF,CAAQE,MAAR,GAAiBX,SAAS,CAACW,MAA7B,CAAjB,CAAV;AACD,SA1BY,CAAf;AA2BD,OA5BD,CA4BE,OAAOvB,GAAP,EAAY;AACZ,cAAMA,GAAN;AACD;AACF,KA1Ca;AAEZ,UAAK2B,MAAL,GAAc,EAAd;AAFY;AAGb;;;EALuBG,oB;;eA+CXrB,W","sourcesContent":["import analyser from \"../../assertion-analyser\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport Mocha from \"mocha\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { connect } from \"http2\";\r\n\r\nconst mocha = new Mocha();\r\nconst testDir = __dirname + '/tests';\r\n// Add each .js file to the mocha instance.\r\n// fs.readdirSync(testDir)\r\n//   .filter(file => {\r\n//     return file.substr(-3) === \".js\";\r\n//   })\r\n//   .forEach(file => {\r\n//     mocha.addFile(path.join(testDir, file));\r\n//   });\r\n\r\nfs.readdir(testDir, (err, files) => {\r\n  files\r\n    .filter(file => {\r\n      return file.substr(-3) === '.js';\r\n    })\r\n    .forEach(file => {\r\n      mocha.addFile(path.join(testDir, file));\r\n    });\r\n})\r\n\r\nclass TestEmitter extends EventEmitter {\r\n  report: object[];\r\n  constructor() {\r\n    super();\r\n    this.report = [];\r\n  }\r\n\r\n  run = () => {\r\n    // Run the tests...\r\n    let tests: object[] = [];\r\n    let context = \"\";\r\n    let separator = \" ~> \";\r\n\r\n    try {\r\n      const runner = mocha\r\n        .ui(\"tdd\")\r\n        .run()\r\n        .on(\"test end\", test => {\r\n          // remove comments\r\n          let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\\\/g, \"\");\r\n          // collapse spaces\r\n          body = body.replace(/\\s+/g, \"\");\r\n          const obj = {\r\n            title: test.title,\r\n            context: context.slice(0, -separator.length),\r\n            state: test.state,\r\n            body: body,\r\n            assertions: analyser(body)\r\n          };\r\n          tests.push(obj);\r\n        })\r\n        .on(\"end\", () => {\r\n          this.report = tests;\r\n          this.emit(\"done\", tests);\r\n        })\r\n        .on(\"suite\", s => {\r\n          context += s.title + separator;\r\n        })\r\n        .on(\"suite end\", s => {\r\n          context = context.slice(0, -(s.title.length + separator.length));\r\n        });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n}\r\n\r\nexport default TestEmitter;\r\n"],"file":"test-runner2.js"}