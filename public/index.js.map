{"version":3,"sources":["../src/index.ts"],"names":["runner","TestEmitter","runTests","run","app","use","helmet","referrerPolicy","policy","express","process","cwd","origin","bodyParser","json","urlencoded","extended","route","get","req","res","sendFile","next","status","type","send","then","listen","env","PORT","console","log","NODE_ENV","setTimeout","e","error"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AAKA;;AATA;AAKA,IAAMA,MAAM,GAAG,IAAIC,sBAAJ,EAAf;AACA,IAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAxB,C,CAEA;;AAGA,IAAMC,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,mBAAOC,cAAP,CAAsB;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAtB,CAAR;AAEAJ,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBI,8BAAeC,OAAO,CAACC,GAAR,KAAgB,SAA/B,CAAnB;AAEAP,GAAG,CAACC,GAAJ,CAAQ,sBAAK;AAACO,EAAAA,MAAM,EAAE;AAAT,CAAL,CAAR,E,CAA8B;;AAE9BR,GAAG,CAACC,GAAJ,CAAQQ,uBAAWC,IAAX,EAAR;AACAV,GAAG,CAACC,GAAJ,CAAQQ,uBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACAZ,GAAG,CAACa,KAAJ,CAAU,YAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAyBC,GAAzB,EAAyC;AAC5CA,EAAAA,GAAG,CAACC,QAAJ,CAAaX,OAAO,CAACC,GAAR,KAAgB,uBAA7B;AACD,CAHH;AAIAP,GAAG,CAACa,KAAJ,CAAU,qBAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAyBC,GAAzB,EAAyC;AAC5CA,EAAAA,GAAG,CAACC,QAAJ,CAAaX,OAAO,CAACC,GAAR,KAAgB,wBAA7B;AACD,CAHH,E,CAKA;;AACAP,GAAG,CAACa,KAAJ,CAAU,GAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAyBC,GAAzB,EAAyC;AAC5CA,EAAAA,GAAG,CAACC,QAAJ,CAAaX,OAAO,CAACC,GAAR,KAAgB,uBAA7B;AACD,CAHH,E,CAKA;;AACA,4BAAiBP,GAAjB,E,CAEA;;AACA,qBAAUA,GAAV,E,CAEA;AAGA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,UAASc,GAAT,EAAwBC,GAAxB,EAAwCE,IAAxC,EAA8C;AACpDF,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,MADR,EAEGC,IAFH;AAGD,CAJD,E,CAMA;;AACA,wBAAYC,IAAZ,CAAiB;AAAA;AAAA;AAAA;AAAA;AACftB,UAAAA,GAAG,CAACuB,MAAJ,CAAWjB,OAAO,CAACkB,GAAR,CAAYC,IAAZ,IAAoB,IAA/B,EAAqC,YAAY;AAC/CC,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBrB,OAAO,CAACkB,GAAR,CAAYC,IAA/C;;AACA,gBAAGnB,OAAO,CAACkB,GAAR,CAAYI,QAAZ,KAAuB,MAA1B,EAAkC;AAChCF,cAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAE,cAAAA,UAAU,CAAC,YAAY;AACrB,oBAAI;AACF/B,kBAAAA,QAAQ;AACT,iBAFD,CAEE,OAAMgC,CAAN,EAAS;AACT,sBAAIC,KAAK,GAAGD,CAAZ;AACEJ,kBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,kBAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH;AACF,eARS,EAQP,IARO,CAAV;AASD;AACF,WAdD;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;eAkBe/B,G,EAAK","sourcesContent":["'use strict'; \r\n\r\nimport express from 'express';\r\nimport { Application, Request, Response } from 'express';\r\nimport bodyParser from 'body-parser'; \r\nimport { expect } from 'chai'; \r\nimport cors from 'cors'; \r\nimport helmet from 'helmet'; \r\nimport { config as configEnv } from 'dotenv'; \r\nconfigEnv();\r\nimport apiRoutes from './routes/api.js'; \r\nimport fccTestingRoutes from './routes/fcctesting'; \r\n// import { run as runTests } from '../test-runner'; \r\nimport TestEmitter from './testing/test-runner2';\r\nconst runner = new TestEmitter();\r\nconst runTests = runner.run;\r\n\r\n// Establish connection to MongoDB with \r\nimport { connectDB } from './models/index';\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(helmet.referrerPolicy({ policy: 'same-origin' }));\r\n\r\napp.use('/public', express.static(process.cwd() + '/public'));\r\n\r\napp.use(cors({origin: '*'})); //For FCC testing purposes only\r\n\r\napp.use(bodyParser.json()); \r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n//Sample front-end\r\napp.route('/b/:board/')\r\n  .get(function (req : Request, res : Response) {\r\n    res.sendFile(process.cwd() + '/src/views/board.html');\r\n  });\r\napp.route('/b/:board/:threadid')\r\n  .get(function (req : Request, res : Response) {\r\n    res.sendFile(process.cwd() + '/src/views/thread.html');\r\n  });\r\n\r\n//Index page (static HTML)\r\napp.route('/')\r\n  .get(function (req : Request, res : Response) {\r\n    res.sendFile(process.cwd() + '/src/views/index.html');\r\n  });\r\n\r\n//For FCC testing purposes\r\nfccTestingRoutes(app);\r\n\r\n//Routing for API \r\napiRoutes(app);\r\n\r\n//Sample Front-end\r\n\r\n    \r\n//404 Not Found Middleware\r\napp.use(function(req : Request, res : Response, next) {\r\n  res.status(404)\r\n    .type('text')\r\n    .send(`Not found. If you're attempting to access a board, please try something like '/api/threads/{a-z}'.`);\r\n});\r\n\r\n//Start our server and tests!\r\nconnectDB().then(async () => {\r\n  app.listen(process.env.PORT || 3000, function () {\r\n    console.log(\"Listening on port \" + process.env.PORT);\r\n    if(process.env.NODE_ENV==='test') {\r\n      console.log('Running Tests...');\r\n      setTimeout(function () {\r\n        try {\r\n          runTests();\r\n        } catch(e) {\r\n          var error = e;\r\n            console.log('Tests are not valid:');\r\n            console.log(error);\r\n        }\r\n      }, 1500);\r\n    }\r\n  });\r\n});\r\n\r\nexport default app; //for testing"],"file":"index.js"}