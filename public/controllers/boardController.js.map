{"version":3,"sources":["../../src/controllers/boardController.ts"],"names":["BoardController","name","console","log","Board","board_name","newBoard","save","doc","findOne","board","regex","match","body","text","delete_password","textType","passwordType","validated","report","deletePassword","threadName"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAGMA,e;;2DAEsB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AADoB;AAAA;AAAA,iDAIO,IAAIC,iBAAJ,CAAU;AAAEC,cAAAA,UAAU,EAAGJ;AAAf,aAAV,CAJP;;AAAA;AAIVK,YAAAA,QAJU;AAKhBA,YAAAA,QAAQ,CAACC,IAAT,CAAc,UAASC,GAAT,EAAyB;AACnCN,cAAAA,OAAO,CAACC,GAAR,gBAAoBF,IAApB;AACH,aAFD;AALgB,6CAQTK,QARS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;4DAcC,kBAAOL,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,OAAO,CAACC,GAAR,kDAAsDF,IAAtD;AADqB;AAAA;AAAA,iDAIGG,kBAAMK,OAAN,CAAc;AAAEJ,cAAAA,UAAU,EAAEJ;AAAd,aAAd,CAJH;;AAAA;AAIXS,YAAAA,KAJW;AAAA,8CAKVA,KALU;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;gEAWI,kBAAOT,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB;AACMU,YAAAA,KAFmB,GAEX,YAFW;;AAAA,iBAItBV,IAAI,CAACW,KAAL,CAAWD,KAAX,CAJsB;AAAA;AAAA;AAAA;;AAAA,8CAII,IAJJ;;AAAA;AAAA,8CAKb,KALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;yDAQP,kBAAOE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB;AACQC,YAAAA,IAFU,GAEgBD,IAFhB,CAEVC,IAFU,EAEJC,eAFI,GAEgBF,IAFhB,CAEJE,eAFI,EAGKC,QAHL,4BAGuBF,IAHvB,GAICG,YAJD,4BAIuBF,eAJvB;AAMZG,YAAAA,SANY,GAMA;AACdJ,cAAAA,IAAI,EAAEE,QAAQ,KAAK,QAAb,IAAyBF,IAAI,KAAK,EAAlC,GAAuC,IAAvC,GAA8C,KADtC;AAEdC,cAAAA,eAAe,EAAEE,YAAY,KAAK,QAAjB,IAA6BF,eAAe,KAAK,EAAjD,GAAsD,IAAtD,GAA6D;AAFhE,aANA;AAAA,8CAWXG,SAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;wDAcD,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AACjBjB,YAAAA,OAAO,CAACC,GAAR,sCAA0CgB,MAA1C;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;wDAIA,kBAAOC,cAAP;AAAA;AAAA;AAAA;AAAA;AACjBlB,YAAAA,OAAO,CAACC,GAAR,kCAAsCiB,cAAtC;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;sDAIF,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AACfnB,YAAAA,OAAO,CAACC,GAAR,kBAAsBkB,UAAtB;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;eAMRrB,e","sourcesContent":["import Board from \"../models/Board\";\r\nimport Body from '../interfaces/PostThreadBody.interface';\r\n\r\nclass BoardController {\r\n\r\n    public createNewBoard = async (name : string) => {\r\n        console.log('attempt to create a new board!');\r\n        \r\n        try {\r\n            const newBoard = await new Board({ board_name : name });\r\n            newBoard.save(function(doc : Document) {\r\n                console.log(`New '${name}' board created!`);\r\n            });\r\n            return newBoard;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    public findBoardByName = async (name : string) => {\r\n        console.log(`attempt to find board by name! ~ name: ${name}`);\r\n\r\n        try {\r\n            const board = await Board.findOne({ board_name: name });\r\n            return board;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    public validateBoardByName = async (name : string) => {\r\n        // console.log(`Validating board by name: ${name}`);\r\n        const regex = /^[a-z]{1}$/;\r\n\r\n        if(name.match(regex)) return true;\r\n        else return false;\r\n    };\r\n\r\n    public validateBody = async (body : Body) => {\r\n        // console.log(`Validating body: `, body);\r\n        const { text, delete_password } = body,\r\n                               textType = typeof text,\r\n                           passwordType = typeof delete_password;\r\n            \r\n        const validated = {\r\n            text: textType === 'string' && text !== '' ? true : false,\r\n            delete_password: passwordType === 'string' && delete_password !== '' ? true : false\r\n        };\r\n\r\n        return validated;\r\n    };\r\n\r\n    public reportBoard = async (report : string) => {\r\n        console.log(`reporting board -> report: ${report}`);\r\n    };\r\n\r\n    public deleteBoard = async (deletePassword : string) => {\r\n        console.log(`deleting board with -> ${deletePassword}`);\r\n    };\r\n\r\n    public addThread = async (threadName : string) => {\r\n        console.log(`add a '${threadName}' thread to board`);\r\n    };\r\n\r\n}\r\n\r\nexport default BoardController;"],"file":"boardController.js"}