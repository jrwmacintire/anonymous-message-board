{"version":3,"sources":["../../src/controllers/boardController.ts"],"names":["BoardController","name","Board","board_name","newBoard","save","doc","findOne","board","threadId","threads","push","regex","match","body","thread_text","delete_password","textType","passwordType","validated","report","console","log","deletePassword","threadName"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAKMA,e;;2DAEsB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAIO,IAAIC,iBAAJ,CAAU;AAAEC,cAAAA,UAAU,EAAGF;AAAf,aAAV,CAJP;;AAAA;AAIVG,YAAAA,QAJU;AAKhBA,YAAAA,QAAQ,CAACC,IAAT,CAAc,UAASC,GAAT,EAAyB,CACnC;AACH,aAFD;AALgB,6CAQTF,QARS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;2DAcA,kBAAOH,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAIIC,kBAAMK,OAAN,CAAc;AAAEJ,cAAAA,UAAU,EAAEF;AAAd,aAAd,CAJJ;;AAAA;AAIVO,YAAAA,KAJU;AAAA,8CAKTA,KALS;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;wDAWH,kBAAOA,KAAP,EAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,YAAAA,OAFK,GAEOF,KAFP,CAELE,OAFK,EAGb;;AACAF,YAAAA,KAAK,CAACE,OAAN,CAAcC,IAAd,CAAmBF,QAAnB;AACAD,YAAAA,KAAK,CAACH,IAAN;AALa,8CAMNG,KANM;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;gEAYQ,kBAAOP,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB;AACMW,YAAAA,KAFmB,GAEX,YAFW;;AAAA,iBAItBX,IAAI,CAACY,KAAL,CAAWD,KAAX,CAJsB;AAAA;AAAA;AAAA;;AAAA,8CAII,IAJJ;;AAAA;AAAA,8CAKb,KALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;yDAQP,kBAAOE,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB;AACQC,YAAAA,WAFU,GAEuBD,IAFvB,CAEVC,WAFU,EAEGC,eAFH,GAEuBF,IAFvB,CAEGE,eAFH,EAGKC,QAHL,4BAGuBF,WAHvB,GAICG,YAJD,4BAIuBF,eAJvB;AAMZG,YAAAA,SANY,GAMA;AACdJ,cAAAA,WAAW,EAAEE,QAAQ,KAAK,QAAb,IAAyBF,WAAW,KAAK,EAAzC,GAA8C,IAA9C,GAAqD,KADpD;AAEdC,cAAAA,eAAe,EAAEE,YAAY,KAAK,QAAjB,IAA6BF,eAAe,KAAK,EAAjD,GAAsD,IAAtD,GAA6D;AAFhE,aANA;AAAA,8CAWXG,SAXW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;wDAcD,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,OAAO,CAACC,GAAR,sCAA0CF,MAA1C;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;wDAIA,kBAAOG,cAAP;AAAA;AAAA;AAAA;AAAA;AACjBF,YAAAA,OAAO,CAACC,GAAR,kCAAsCC,cAAtC;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;sDAIF,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AACfH,YAAAA,OAAO,CAACC,GAAR,kBAAsBE,UAAtB;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;eAMRxB,e","sourcesContent":["import Board from \"../models/Board\";\r\nimport Body from '../interfaces/PostThreadBody.interface';\r\nimport BoardInterface from '../interfaces/Board.interface';\r\nimport { ObjectID } from \"bson\";\r\n\r\nclass BoardController {\r\n\r\n    public createNewBoard = async (name : string) => {\r\n        // console.log('attempt to create a new board!');\r\n        \r\n        try {\r\n            const newBoard = await new Board({ board_name : name });\r\n            newBoard.save(function(doc : Document) {\r\n                // console.log(`New '${name}' board created!`);\r\n            });\r\n            return newBoard;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    public getBoardByName = async (name : string) => {\r\n        // console.log(`attempt to find board by name! ~ name: ${name}`);\r\n\r\n        try {\r\n            const board = await Board.findOne({ board_name: name });\r\n            return board;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    public updateBoard = async (board: BoardInterface, threadId: ObjectID) => {\r\n        try {\r\n            const { threads } = board;\r\n            // console.log(`Updating board! ~ threads: `, threads);\r\n            board.threads.push(threadId);\r\n            board.save();\r\n            return board;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    public validateBoardByName = async (name : string) => {\r\n        // console.log(`Validating board by name: ${name}`);\r\n        const regex = /^[a-z]{1}$/;\r\n\r\n        if(name.match(regex)) return true;\r\n        else return false;\r\n    };\r\n\r\n    public validateBody = async (body : Body) => {\r\n        // console.log(`Validating body: `, body);\r\n        const { thread_text, delete_password } = body,\r\n                               textType = typeof thread_text,\r\n                           passwordType = typeof delete_password;\r\n            \r\n        const validated = {\r\n            thread_text: textType === 'string' && thread_text !== '' ? true : false,\r\n            delete_password: passwordType === 'string' && delete_password !== '' ? true : false\r\n        };\r\n\r\n        return validated;\r\n    };\r\n\r\n    public reportBoard = async (report : string) => {\r\n        console.log(`reporting board -> report: ${report}`);\r\n    };\r\n\r\n    public deleteBoard = async (deletePassword : string) => {\r\n        console.log(`deleting board with -> ${deletePassword}`);\r\n    };\r\n\r\n    public addThread = async (threadName : string) => {\r\n        console.log(`add a '${threadName}' thread to board`);\r\n    };\r\n\r\n}\r\n\r\nexport default BoardController;"],"file":"boardController.js"}