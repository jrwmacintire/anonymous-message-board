{"version":3,"sources":["../../src/controllers/threadController.ts"],"names":["ThreadController","board","body","boardId","console","log","threadBody","Thread","create","newThread","reply","delete_password","report"],"mappings":";;;;;;;;;;;;;;;AAEA;;;;;;IAGMA,gB;;4DAEgB,iBAAOC,KAAP,EAAsBC,IAAtB,EAA0CC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AADc;AAGJC,YAAAA,UAHI,qBAGcJ,IAHd;AAGoBC,cAAAA,OAAO,EAAEA;AAH7B;AAAA;AAAA,iDAIcI,mBAAOC,MAAP,CAAcF,UAAd,CAJd;;AAAA;AAIJG,YAAAA,SAJI;AAAA,6CAKHA,SALG;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;qDAeP,UAACC,KAAD,EAAmB;AAC1BN,IAAAA,OAAO,CAACC,GAAR;AACH,G;wDAEa,UAACK,KAAD,EAAmB,CAEhC,C;yDAEc,UAACC,eAAD,EAA6B,CAE3C,C;yDAEc,UAACC,MAAD,EAAoB,CAElC,C;;;eAIUZ,gB","sourcesContent":["import ThreadInterface from '../interfaces/Thread.interface';\r\nimport ResponseBody from '../interfaces/PostThreadBody.interface';\r\nimport Thread from '../models/Thread';\r\nimport { ObjectId } from 'bson';\r\n\r\nclass ThreadController {\r\n\r\n    createNewThread = async (board: string, body: ResponseBody, boardId: ObjectId) => {\r\n        console.log('attempt to create a new thread!');\r\n        try {\r\n            const threadBody = { ...body, boardId: boardId };\r\n            const newThread = await Thread.create(threadBody);\r\n            return newThread;\r\n        } catch(err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    // findThreadByName = (name) => {\r\n    //     console.log(`attempt to find thread by name! ~ name: ${name}`)\r\n    // }\r\n\r\n    addReply = (reply: string) => {\r\n        console.log(`adding reply!?1`);\r\n    };\r\n\r\n    deleteReply = (reply: string) => {\r\n\r\n    };\r\n\r\n    deleteThread = (delete_password: string) => {\r\n\r\n    };\r\n\r\n    reportThread = (report: string) => {\r\n\r\n    };\r\n\r\n}\r\n\r\nexport default ThreadController;"],"file":"threadController.js"}