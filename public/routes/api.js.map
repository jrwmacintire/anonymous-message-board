{"version":3,"sources":["../../src/routes/api.ts"],"names":["boardController","BoardController","threadController","ThreadController","app","route","get","req","res","boardName","params","board","validateBoardByName","validBoardName","getBoardByName","getThreadsBySortString","bumpedThreads","filteredThreads","map","thread","_id","text","thread_text","created_on","bumped_on","replycount","replies","length","send","createNewBoard","newBoard","status","post","body","delete_password","Promise","all","validateBody","valid","validatedBoardName","validatedBody","createNewThread","id","updateBoard","redirect","undefined","Error","put","console","log","getThreadByID","thread_id","threadToDelete"],"mappings":"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","sourcesContent":["/*\r\n*\r\n*\r\n*       Complete the API routing below\r\n*\r\n*\r\n*/\r\n\r\n'use strict';\r\n\r\n// const expect = require('chai').expect;\r\n\r\nimport BoardController from '../controllers/boardController';\r\nconst boardController = new BoardController();\r\nimport ThreadController from '../controllers/threadController';\r\nconst threadController = new ThreadController();\r\nimport BoardInterface from '../interfaces/Board.interface';\r\nimport ThreadInterface from '../interfaces/Thread.interface';\r\nimport ResponseBody from '../interfaces/PostThreadBody.interface';\r\nimport { Request, Response, Application } from 'express';\r\nimport { ParamsDictionary } from 'express-serve-static-core';\r\nimport { Document } from 'mongoose';\r\n\r\nexport default function (app: Application) {\r\n\r\n  app.route('/api/threads/:board')\r\n    .get(async function (req: Request, res: Response) {\r\n\r\n      try {\r\n        const boardName: string = req.params.board;\r\n        const validBoardName = await boardController.validateBoardByName(boardName);\r\n\r\n        if (validBoardName) {\r\n          const board = await boardController.getBoardByName(boardName);\r\n          if (board) {\r\n            // console.log(`Board FOUND:`, board);\r\n\r\n            // start: array of ObjectIDs from board's 'threads' array\r\n            //      : take 10 most recently bumped thread IDs from (index 0-9)\r\n            //      : query all docs with given thread IDs from DB\r\n            //      : parse raw thread docs into objects \r\n            //      : filter out 'delete_password' or 'reported' values from response array\r\n            //   end: parsed/filtered array of thread doc objects\r\n\r\n            const bumpedThreads = await threadController.getThreadsBySortString('-created_on', 10);\r\n            const filteredThreads = bumpedThreads.map((thread: ThreadInterface) => {\r\n              return {\r\n                _id: thread._id,\r\n                text: thread.thread_text,\r\n                created_on: thread.created_on,\r\n                bumped_on: thread.bumped_on,\r\n                replycount: thread.replies.length\r\n              }\r\n            });\r\n            res.send(filteredThreads);\r\n          } else {\r\n            // console.log('Board not found - prepare to create board!');\r\n            const newBoard = await boardController.createNewBoard(boardName);\r\n            res.send();\r\n          }\r\n\r\n          // validate boardName\r\n          // throw error if invalid\r\n          // query thread ids from board\r\n          // filter 10 threads with the highest bumps/replies\r\n          // display with json, or send 'No replies were found on this thread.'\r\n          // res.sendFile(process.cwd() + `/src/views/board.html`);\r\n\r\n        } else { // Invalid board name, send error response\r\n          res.status(400).send('A board with that name could not be found. Please enter a different board name.');\r\n        }\r\n\r\n      } catch (err) {\r\n        // res.send(err);\r\n        throw err;\r\n      }\r\n\r\n    })\r\n    .post(async function (req: Request, res: Response) {\r\n      const boardName: string = req.params.board;\r\n      const body = {\r\n        thread_text: req.body.thread_text,\r\n        delete_password: req.body.delete_password\r\n      };\r\n\r\n      const valid = await Promise.all([\r\n        boardController.validateBoardByName(boardName),\r\n        boardController.validateBody(body)\r\n      ]);\r\n\r\n      const validatedBoardName: boolean = valid[0],\r\n        validatedBody: ResponseBody = valid[1];\r\n\r\n      interface ResponseBody {\r\n        thread_text: boolean,\r\n        delete_password: boolean\r\n      };\r\n\r\n      // console.log(`valid: `, valid);\r\n      // If board's name is valid\r\n      if (validatedBoardName) {\r\n        // use board controller query the DB for a matching board\r\n\r\n        const board = await boardController.getBoardByName(boardName);\r\n\r\n        // and both 'body' properties are valid\r\n        if (validatedBody.thread_text && validatedBody.delete_password && board !== null) {\r\n\r\n          if(board) {\r\n            const thread = await threadController.createNewThread(boardName, body, board.id);\r\n\r\n            await boardController.updateBoard(board, thread._id);\r\n            // update board with thread's id in 'threads' array\r\n            \r\n            // then redirect to the newly created thread's board.\r\n            res.redirect(303, `/api/threads/${boardName}`);\r\n          } else {\r\n            res.send('Redirect failed, check if board exists...');\r\n          }\r\n        }\r\n        // the 'body' contains invalid info\r\n        else {\r\n          if(board === null || board === undefined) {\r\n            res.status(400).send('Board not found. Please create or search for a new board.');\r\n          } else if (!validatedBody.thread_text && !validatedBody.delete_password) {\r\n            // Error: all inputs invalid\r\n            res.status(400).send('Please ensure all input fields are filled out and try again.');\r\n          } else if (!validatedBody.thread_text) {\r\n            // Error: 'text' field is invalid\r\n            res.status(400).send('Invalid input for text. Please try again.');\r\n          } else if (!validatedBody.delete_password) {\r\n            // Error: 'delete_password' field is invalid\r\n            res.status(400).send('Invalid input for delete_password field. Please try again.');\r\n          } else {\r\n            throw Error('Catch all error for error-handling on body validation.');\r\n          }\r\n        }\r\n      } else {\r\n        res.status(400).send('Invalid input for board name. Please try again.');\r\n      }\r\n\r\n      // validate boardName with DB\r\n      // if not found, make a new board (any letter 'a-z')\r\n      // board is now found/created and ready for use\r\n      // validate the 'text' and 'delete_password' fields\r\n      // throw error if invalid \r\n      // or create new thread with model\r\n      // add new thread's id to current board\r\n      // add 'text' and 'delete_password'\r\n      // automatically generate other fields ('bumped_on, created_on')\r\n      // res.redirect(307, `/api/threads/${boardName}`);\r\n\r\n    })\r\n    .put(async function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .delete(async function (req: Request, res: Response) {\r\n\r\n      const { body } = req;\r\n      console.log(`body of delete request: `, body);\r\n      const threadToDelete = await threadController.getThreadByID(body.thread_id);\r\n      res.send('Request to delete a thread?');\r\n    });\r\n\r\n  app.route('/api/replies/:board')\r\n    .get(function (req: Request, res: Response) {\r\n      const params: ParamsDictionary = req.params;\r\n      res.send(`params: ${params}`);\r\n    })\r\n    .post(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .put(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .delete(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    });\r\n\r\n};\r\n"],"file":"api.js"}