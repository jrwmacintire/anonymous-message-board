{"version":3,"sources":["../../src/routes/api.ts"],"names":["boardController","BoardController","app","route","get","req","res","boardName","params","board","validateBoardByName","validBoardName","findBoardByName","console","log","response","message","json","createNewBoard","newBoard","status","send","post","body","text","delete_password","Promise","all","validateBody","valid","validatedBoardName","validatedBody","redirect","Error","put"],"mappings":"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","sourcesContent":["/*\r\n*\r\n*\r\n*       Complete the API routing below\r\n*\r\n*\r\n*/\r\n\r\n'use strict';\r\n\r\n// const expect = require('chai').expect;\r\n\r\nimport BoardController from '../controllers/boardController';\r\nconst boardController = new BoardController();\r\nimport Board from '../models/Board';\r\nimport BoardInterface from '../interfaces/Board.interface';\r\nimport { Request, Response, Application } from 'express';\r\nimport { ParamsDictionary } from 'express-serve-static-core';\r\n\r\nexport default function (app : Application) {\r\n  \r\n  app.route('/api/threads/:board')\r\n      .get(async function(req : Request, res : Response) {\r\n        const boardName : string = req.params.board;\r\n        \r\n        try {\r\n\r\n          const validBoardName = await boardController.validateBoardByName(boardName);\r\n\r\n          if(validBoardName) {\r\n            const board = await boardController.findBoardByName(boardName);\r\n            if(board) {\r\n              console.log(`Board FOUND:`, board);\r\n              const response = {\r\n                board: board,\r\n                message: 'working on GET'\r\n              }\r\n              res.json(response);\r\n            } else {\r\n              console.log('Board not found - prepare to create board!');\r\n              const newBoard = await boardController.createNewBoard(boardName);\r\n              res.json(newBoard);\r\n            }\r\n\r\n            // validate boardName\r\n            // throw error if invalid\r\n            // query thread ids from board\r\n            // filter 10 threads with the highest bumps/replies\r\n            // display with json, or send 'No replies were found on this thread.'\r\n            // res.sendFile(process.cwd() + `/src/views/board.html`);\r\n\r\n          } else { // Invalid board name, send error response\r\n            res.status(400).send('Error: invalid board name');\r\n          }\r\n\r\n        } catch(err) {\r\n          throw err;\r\n        }\r\n\r\n      })\r\n      .post(async function(req : Request, res : Response) {\r\n        const boardName : string = req.params.board;\r\n        const { text, delete_password } = req.body;\r\n        const body = {\r\n          text: text,\r\n          delete_password: delete_password\r\n        };\r\n\r\n        const valid = await Promise.all([\r\n          boardController.validateBoardByName(boardName), \r\n          boardController.validateBody(body)\r\n        ]);\r\n\r\n        interface Body {\r\n          text: boolean,\r\n          delete_password: boolean\r\n        };\r\n\r\n        try {\r\n          console.log(`valid: `, valid);\r\n          const validatedBoardName : boolean = valid[0],\r\n                     validatedBody : Body = valid[1];\r\n\r\n          // If board's name is valid\r\n          if(validatedBoardName) {\r\n            // use board controller query the DB for a matching board\r\n\r\n            // const board = await boardController.findBoardByName(boardName);\r\n            // console.log(`board: `, board);\r\n            \r\n\r\n            // and both 'body' properties are valid\r\n            if(validatedBody.text && validatedBody.delete_password) {\r\n\r\n              // then redirect to the newly created thread's board.\r\n              res.redirect(`/api/threads/${boardName}`);\r\n            }\r\n            // the 'body' contains invalid info\r\n            else {\r\n              if(!validatedBody.text && !validatedBody.delete_password) {\r\n                // Error: all inputs invalid\r\n                res.status(400).send('Please ensure all input fields are filled out and try again.');\r\n              } else if(!validatedBody.text) {\r\n                // Error: 'text' field is invalid\r\n                res.status(400).send('Invalid input for text. Please try again.');\r\n              } else if(!validatedBody.delete_password) {\r\n                // Error: 'delete_password' field is invalid\r\n                res.status(400).send('Invalid input for delete_password field. Please try again.');\r\n              } else {\r\n                throw Error('Catch all error for error-handling on body validation.');\r\n              }\r\n            }\r\n          } else {\r\n            res.status(400).send('Invalid input for board name. Please try again.');\r\n          }\r\n        } catch(err) {\r\n          throw err;\r\n          // res.send(err);\r\n        }\r\n\r\n        // validate boardName with DB\r\n        // if not found, make a new board (any letter 'a-z')\r\n        // board is now found/created and ready for use\r\n        // validate the 'text' and 'delete_password' fields\r\n        // throw error if invalid \r\n        // or create new thread with model\r\n        // add new thread's id to current board\r\n        // add 'text' and 'delete_password'\r\n        // automatically generate other fields ('bumped_on, created_on')\r\n        // res.redirect(307, `/api/threads/${boardName}`);\r\n        \r\n      })\r\n      .put(function(req : Request, res : Response) {\r\n        res.send(req.body);\r\n      })\r\n      .delete(function(req : Request, res : Response) {\r\n        res.send('Request to delete a thread?');\r\n      });\r\n    \r\n  app.route('/api/replies/:board')\r\n      .get(function(req : Request, res : Response) {\r\n        const params : ParamsDictionary = req.params;\r\n        res.send(`params: ${params}`);\r\n      })\r\n      .post(function(req : Request, res : Response) {\r\n        res.send(req.body);\r\n      })\r\n      .put(function(req : Request, res : Response) {\r\n        res.send(req.body);\r\n      })\r\n      .delete(function(req : Request, res : Response) {\r\n        res.send(req.body);\r\n      });\r\n\r\n};\r\n"],"file":"api.js"}