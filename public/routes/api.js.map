{"version":3,"sources":["../../src/routes/api.ts"],"names":["boardController","BoardController","app","route","get","req","res","boardName","params","board","validateBoardByName","validBoardName","getBoardByName","console","log","send","createNewBoard","newBoard","json","status","post","body","text","delete_password","Promise","all","validateBody","valid","validatedBoardName","validatedBody","redirect","Error","put"],"mappings":"AAAA;;;;;;;AAQA,a,CAEA;;;;;;;;;;;AAEA;;AACA,IAAMA,eAAe,GAAG,IAAIC,2BAAJ,EAAxB;;AAMe,kBAAUC,GAAV,EAA4B;AAEzCA,EAAAA,GAAG,CAACC,KAAJ,CAAU,qBAAV,EACGC,GADH,CACO,iBAAgBC,GAAhB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGKC,YAAAA,SAHL,GAGyBF,GAAG,CAACG,MAAJ,CAAWC,KAHpC;AAAA;AAAA,iDAI4BT,eAAe,CAACU,mBAAhB,CAAoCH,SAApC,CAJ5B;;AAAA;AAIKI,YAAAA,cAJL;;AAAA,iBAMGA,cANH;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAOqBX,eAAe,CAACY,cAAhB,CAA+BL,SAA/B,CAPrB;;AAAA;AAOOE,YAAAA,KAPP;;AAAA,iBAQKA,KARL;AAAA;AAAA;AAAA;;AASGI,YAAAA,OAAO,CAACC,GAAR,iBAA4BL,KAA5B;AACAH,YAAAA,GAAG,CAACS,IAAJ,CAAS,EAAT;AAVH;AAAA;;AAAA;AAYGF,YAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AAZH;AAAA,iDAa0Bd,eAAe,CAACgB,cAAhB,CAA+BT,SAA/B,CAb1B;;AAAA;AAaSU,YAAAA,QAbT;AAcGX,YAAAA,GAAG,CAACY,IAAJ,CAASD,QAAT;;AAdH;AAAA;AAAA;;AAAA;AAwBQ;AACPX,YAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,2BAArB;;AAzBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADP,EAmCGK,IAnCH,CAmCQ,kBAAgBf,GAAhB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACEC,YAAAA,SADF,GACsBF,GAAG,CAACG,MAAJ,CAAWC,KADjC;AAEEY,YAAAA,IAFF,GAES;AACXC,cAAAA,IAAI,EAAEjB,GAAG,CAACgB,IAAJ,CAASC,IADJ;AAEXC,cAAAA,eAAe,EAAElB,GAAG,CAACgB,IAAJ,CAASE;AAFf,aAFT;AAAA;AAAA,iDAOgBC,OAAO,CAACC,GAAR,CAAY,CAC9BzB,eAAe,CAACU,mBAAhB,CAAoCH,SAApC,CAD8B,EAE9BP,eAAe,CAAC0B,YAAhB,CAA6BL,IAA7B,CAF8B,CAAZ,CAPhB;;AAAA;AAOEM,YAAAA,KAPF;AAYEC,YAAAA,kBAZF,GAYgCD,KAAK,CAAC,CAAD,CAZrC,EAaFE,aAbE,GAaoBF,KAAK,CAAC,CAAD,CAbzB;AAkBH,aAlBG,CAoBJ;AACA;;AArBI,iBAsBAC,kBAtBA;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAyBkB5B,eAAe,CAACY,cAAhB,CAA+BL,SAA/B,CAzBlB;;AAAA;AAyBIE,YAAAA,KAzBJ;;AAAA,kBA4BEoB,aAAa,CAACP,IAAd,IAAsBO,aAAa,CAACN,eA5BtC;AAAA;AAAA;AAAA;;AA+BA;AACAjB,YAAAA,GAAG,CAACwB,QAAJ,CAAa,GAAb,yBAAkCvB,SAAlC;AAhCA;AAAA;;AAAA;AAAA,kBAoCI,CAACsB,aAAa,CAACP,IAAf,IAAuB,CAACO,aAAa,CAACN,eApC1C;AAAA;AAAA;AAAA;;AAqCE;AACAjB,YAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,8DAArB;AAtCF;AAAA;;AAAA;AAAA,gBAuCYc,aAAa,CAACP,IAvC1B;AAAA;AAAA;AAAA;;AAwCE;AACAhB,YAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,2CAArB;AAzCF;AAAA;;AAAA;AAAA,gBA0CYc,aAAa,CAACN,eA1C1B;AAAA;AAAA;AAAA;;AA2CE;AACAjB,YAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,4DAArB;AA5CF;AAAA;;AAAA;AAAA,kBA8CQgB,KAAK,CAAC,wDAAD,CA9Cb;;AAAA;AAAA;AAAA;;AAAA;AAkDFzB,YAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,iDAArB;;AAlDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAnCR,EAoGGiB,GApGH,CAoGO,UAAU3B,GAAV,EAAwBC,GAAxB,EAAuC;AAC1CA,IAAAA,GAAG,CAACS,IAAJ,CAASV,GAAG,CAACgB,IAAb;AACD,GAtGH,YAuGU,UAAUhB,GAAV,EAAwBC,GAAxB,EAAuC;AAC7CA,IAAAA,GAAG,CAACS,IAAJ,CAAS,6BAAT;AACD,GAzGH;AA2GAb,EAAAA,GAAG,CAACC,KAAJ,CAAU,qBAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAwBC,GAAxB,EAAuC;AAC1C,QAAME,MAAwB,GAAGH,GAAG,CAACG,MAArC;AACAF,IAAAA,GAAG,CAACS,IAAJ,mBAAoBP,MAApB;AACD,GAJH,EAKGY,IALH,CAKQ,UAAUf,GAAV,EAAwBC,GAAxB,EAAuC;AAC3CA,IAAAA,GAAG,CAACS,IAAJ,CAASV,GAAG,CAACgB,IAAb;AACD,GAPH,EAQGW,GARH,CAQO,UAAU3B,GAAV,EAAwBC,GAAxB,EAAuC;AAC1CA,IAAAA,GAAG,CAACS,IAAJ,CAASV,GAAG,CAACgB,IAAb;AACD,GAVH,YAWU,UAAUhB,GAAV,EAAwBC,GAAxB,EAAuC;AAC7CA,IAAAA,GAAG,CAACS,IAAJ,CAASV,GAAG,CAACgB,IAAb;AACD,GAbH;AAeD;;AAAA","sourcesContent":["/*\r\n*\r\n*\r\n*       Complete the API routing below\r\n*\r\n*\r\n*/\r\n\r\n'use strict';\r\n\r\n// const expect = require('chai').expect;\r\n\r\nimport BoardController from '../controllers/boardController';\r\nconst boardController = new BoardController();\r\nimport Board from '../models/Board';\r\nimport BoardInterface from '../interfaces/Board.interface';\r\nimport { Request, Response, Application } from 'express';\r\nimport { ParamsDictionary } from 'express-serve-static-core';\r\n\r\nexport default function (app: Application) {\r\n\r\n  app.route('/api/threads/:board')\r\n    .get(async function (req: Request, res: Response) {\r\n\r\n      try {\r\n        const boardName: string = req.params.board;\r\n        const validBoardName = await boardController.validateBoardByName(boardName);\r\n\r\n        if (validBoardName) {\r\n          const board = await boardController.getBoardByName(boardName);\r\n          if (board) {\r\n            console.log(`Board FOUND:`, board);\r\n            res.send([]);\r\n          } else {\r\n            console.log('Board not found - prepare to create board!');\r\n            const newBoard = await boardController.createNewBoard(boardName);\r\n            res.json(newBoard);\r\n          }\r\n\r\n          // validate boardName\r\n          // throw error if invalid\r\n          // query thread ids from board\r\n          // filter 10 threads with the highest bumps/replies\r\n          // display with json, or send 'No replies were found on this thread.'\r\n          // res.sendFile(process.cwd() + `/src/views/board.html`);\r\n\r\n        } else { // Invalid board name, send error response\r\n          res.status(400).send('Error: invalid board name');\r\n        }\r\n\r\n      } catch (err) {\r\n        // res.send(err);\r\n        throw err;\r\n      }\r\n\r\n    })\r\n    .post(async function (req: Request, res: Response) {\r\n      const boardName: string = req.params.board;\r\n      const body = {\r\n        text: req.body.text,\r\n        delete_password: req.body.delete_password\r\n      };\r\n\r\n      const valid = await Promise.all([\r\n        boardController.validateBoardByName(boardName),\r\n        boardController.validateBody(body)\r\n      ]);\r\n\r\n      const validatedBoardName: boolean = valid[0],\r\n        validatedBody: Body = valid[1];\r\n\r\n      interface Body {\r\n        text: boolean,\r\n        delete_password: boolean\r\n      };\r\n\r\n      // console.log(`valid: `, valid);\r\n      // If board's name is valid\r\n      if (validatedBoardName) {\r\n        // use board controller query the DB for a matching board\r\n\r\n        const board = await boardController.getBoardByName(boardName);\r\n\r\n        // and both 'body' properties are valid\r\n        if (validatedBody.text && validatedBody.delete_password) {\r\n\r\n\r\n          // then redirect to the newly created thread's board.\r\n          res.redirect(303, `/api/threads/${boardName}`);\r\n        }\r\n        // the 'body' contains invalid info\r\n        else {\r\n          if (!validatedBody.text && !validatedBody.delete_password) {\r\n            // Error: all inputs invalid\r\n            res.status(400).send('Please ensure all input fields are filled out and try again.');\r\n          } else if (!validatedBody.text) {\r\n            // Error: 'text' field is invalid\r\n            res.status(400).send('Invalid input for text. Please try again.');\r\n          } else if (!validatedBody.delete_password) {\r\n            // Error: 'delete_password' field is invalid\r\n            res.status(400).send('Invalid input for delete_password field. Please try again.');\r\n          } else {\r\n            throw Error('Catch all error for error-handling on body validation.');\r\n          }\r\n        }\r\n      } else {\r\n        res.status(400).send('Invalid input for board name. Please try again.');\r\n      }\r\n\r\n      // validate boardName with DB\r\n      // if not found, make a new board (any letter 'a-z')\r\n      // board is now found/created and ready for use\r\n      // validate the 'text' and 'delete_password' fields\r\n      // throw error if invalid \r\n      // or create new thread with model\r\n      // add new thread's id to current board\r\n      // add 'text' and 'delete_password'\r\n      // automatically generate other fields ('bumped_on, created_on')\r\n      // res.redirect(307, `/api/threads/${boardName}`);\r\n\r\n    })\r\n    .put(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .delete(function (req: Request, res: Response) {\r\n      res.send('Request to delete a thread?');\r\n    });\r\n\r\n  app.route('/api/replies/:board')\r\n    .get(function (req: Request, res: Response) {\r\n      const params: ParamsDictionary = req.params;\r\n      res.send(`params: ${params}`);\r\n    })\r\n    .post(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .put(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    })\r\n    .delete(function (req: Request, res: Response) {\r\n      res.send(req.body);\r\n    });\r\n\r\n};\r\n"],"file":"api.js"}