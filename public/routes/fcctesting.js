/*
*
*
*
*
*
*
*
*
*
*
*
*       DO NOT EDIT THIS FILE
*       For FCC testing purposes!
*
*
*
*
*
*
*
*
*
*
*
*/
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _cors = _interopRequireDefault(require("cors"));

var _fs = _interopRequireDefault(require("fs"));

var _testRunner = _interopRequireDefault(require("../testing/test-runner2"));

var _keys = require("../helper/keys");

// import runner from '../../test-runner';
var runner = new _testRunner["default"]();

function _default(app) {
  app.route('/_api/server.js').get(function (req, res, next) {
    console.log('requested');

    _fs["default"].readFile(__dirname + '/public/index.js', function (err, data) {
      if (err) return next(err);
      res.send(data.toString());
    });
  });
  app.route('/_api/routes/api.js').get(function (req, res, next) {
    console.log('requested');

    _fs["default"].readFile(__dirname + '/routes/api.js', function (err, data) {
      if (err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  app.route('/_api/controllers/convertHandler.js').get(function (req, res, next) {
    console.log('requested');

    _fs["default"].readFile(__dirname + '/controllers/convertHandler.js', function (err, data) {
      if (err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  var error;
  app.get('/_api/get-tests', (0, _cors["default"])(), function (req, res, next) {
    console.log(error);
    if (!error && process.env.NODE_ENV === 'test') return next();
    res.json({
      status: 'unavailable'
    });
  }, function (req, res, next) {
    if (!runner.report) return next();
    res.json(testFilter(runner.report, req.query.type, req.query.n));
  }, function (req, res) {
    runner.on('done', function (report) {
      process.nextTick(function () {
        return res.json(testFilter(runner.report, req.query.type, req.query.n));
      });
    });
  });
  app.get('/_api/app-info', function (req, res) {
    var hs = (0, _keys.keys)(res.header).filter(function (h) {
      return !h.match(/^access-control-\w+/);
    });
    var hObj = {}; // broken
    // hs.forEach((h: any) => { hObj[h] = res.header[h] });
    // delete res.header['strict-transport-security'];
    // new w/ TS

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = hs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var h = _step.value;
        hObj[h] = res.header[h];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    ; // delete res.header['strict-transport-security'];

    res.json({
      headers: hObj
    });
  });
}

; // lazy type settings

function testFilter(tests, type, n) {
  var out;

  switch (type) {
    case 'unit':
      out = tests.filter(function (t) {
        return t.context.match('Unit Tests');
      });
      break;

    case 'functional':
      out = tests.filter(function (t) {
        return t.context.match('Functional Tests') && !t.title.match('#example');
      });
      break;

    default:
      out = tests;
  }

  if (n !== undefined) {
    return out[n] || out;
  }

  return out;
}
//# sourceMappingURL=fcctesting.js.map